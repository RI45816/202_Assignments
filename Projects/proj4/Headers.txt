==> Flower.h <==
//Title: Flower.h
//Author: Jeremy Dixon and Felipe Bastos
//Date: 4/13/2017
//Description: Describes the child class Flower (parent Plant.h)

#ifndef FLOWER_H
#define FLOWER_H
#include "Plant.h"

class Flower: public Plant {
public:
  //Title: Flower
  //Pre: None
  //Post: Default constructor
  Flower();

  //Title: Plant(int, string)
  //Pre: None
  //Post: Constructor with custom petals and color
  Flower(int numPetals, string color);

  //Title: die
  //Pre: Flower
  //Post: Sets isAlive to false and numPetals to 0
  virtual void die();

  //Title: virtual tick
  //Pre: Flower
  //Post: A month passes is the flower's life
  virtual void tick();
  
  //Title: operator<< (Overloaded << operator)
  //Pre: Flower
  //Post: Inserts the stream information about the flower
  virtual ostream& operator<<(ostream&);
  
 protected:
  int m_numPetals;
  string m_color;
  bool m_isFlowering;
};

#endif 

==> Fruit.h <==
#ifndef FRUIT_H
#define FRUIT_H
#include <string>
using namespace std;

class Fruit {
public:
    
    // Fruit()
    // pre:  -
    // post: fruit object with random color
    Fruit();
    
   //  getColor()
    // pre:  -
    // post: returns own color
    string GetColor();

private:
    string m_color;
};

#endif

==> Garden.h <==
#ifndef GARDEN_H
#define GARDEN_H
#include "Plant.h"
#include "Vegetable.h"
#include "Tree.h"
#include "Flower.h"

class Garden {
public:
  //Title: Garden() Constructor
  //Pre: Garden
  //Post: Garden object with no plants
  Garden();
  //Title: Garden() Destructor
  //Pre: Garden
  //Post: Garden object (and plants) are destroyed
  ~Garden();

  //Title: addPlant(int, int)
  //Pre: Requires type of plant (1 = Flower, 2 = Vegetable, 3 = Tree) and the quantity of that type
  //Post: Plant added to the garden vector  
  void addPlant(int type, int quantity);

  //Title: tick(int) 
  //Pre: Garden One tick = One month
  //Post: Calls tick for each item in the garden for the duration passed to it
  void tick(int);

  //Title: tick(1)
  //Pre: Garden
  //Post: Calls tick for each item in the garden for exactly one month
  void tick();
    
  //Title: getSize
  //Pre: Garden
  //Post: returns how many items are in the garden
  int getSize();
  
  //Title: getMonths
  //Pre: Garden
  //Post: returns how many months have passed since start of simulation
  //    (i.e., how many ticks)
  int getMonths();
        
private:
    vector <Plant*> m_garden;
    int m_gardenSize;
    int m_month;
};

#endif

==> Headers.txt <==

==> Plant.h <==
//Title: Plant.h
//Author: Jeremy Dixon and Felipe Bastos
//Date: 4/11/2017
//Description: Describes the parent class Plant

#ifndef PLANT_H
#define PLANT_H
#include <iostream>
#include <cstdlib>
#include <time.h>
using namespace std;

class Plant {
public:
  //Title: Plant
  //Pre: None
  //Post: Abstract class (cannot be called)
  Plant();
  
  // virtual ~Plant()
  // pre:  -
  // post: destroys plant object
  virtual ~Plant();
  
  //Accessors
  
  //Title: GetIsDiseased
  //Pre: None
  //Post: returns m_isDiseased
  bool GetIsDiseased();
  
  //Title: GetIsAlive
  //Pre: None
  //Post: returns m_isAlive
  bool GetIsAlive();
  
  //Title: GetSize
  //Pre: None
  //Post: returns m_size
  int GetSize();
  
  //Title: SetSize(int)
  //Pre: None
  //Post: m_size is set
  void SetSize(int size);
  
//Title: SetIsAlive(bool)
  //Pre: None
  //Post: m_isAlive is set
  void SetIsAlive(bool isAlive);

  //Title: SetIsDiseased(bool)
  //Pre: None
  //Post: m_isDiseased is set
  void SetIsDiseased(bool isDiseased);
  
  //Title: die
  //Pre: Virtual
  //Post: Virtual
  virtual void die() = 0;
  
  //Title: tick
  //Pre: Virtual
  //Post: Virtual
  virtual void tick() = 0;
  
  // virtual std::ostream &operator>>(std::ostream&)
  // pre:  Virtual
  // post: Virtual
  virtual ostream& operator<<(ostream& os) = 0;
  
 private:
  int m_size; //Current size
  bool m_isDiseased; //Can die
  bool m_isAlive; //Current status
};


#endif

==> Tree.h <==
#ifndef TREE_H
#define TREE_H
#include "Plant.h"
#include "Fruit.h"
#include <vector>

class Tree: public Plant {
public:
  //Title: Tree () Constructor
  //Pre: Garden
  //Post: Tree object
  Tree();

  //Title: ~Tree
  //Pre: Garden
  //Post: Destroys tree (and fruit?)  
  ~Tree();

  //Title: die
  //Pre: Garden
  //Post: A tree can die after 120 months
  virtual void die();

  //Title: ClearFruit
  //Pre: Garden and Tree with fruit
  //Post: Clears all fruit from the tree  
  void ClearFruit();

  //Title: virtual void tick(Plant::EVENT)
  //Pre: Garden
  //Post: A month passes in the tree's life
  virtual void tick();
  
  //Title: virtual std::ostream &operator>>(std::ostream&)
  //Pre:  -
  //Post: Inserts into the ostream& the tree's information
  virtual ostream& operator<<(ostream&);

private:
    vector <Fruit*> m_fruit;
};

#endif 

==> Vegetable.h <==
//Title: Vegetable.h
//Author: Jeremy Dixon and Felipe Bastos
//Date: 4/11/2017
//Description: Describes the child class Vegetable (Parent Plant.h)

#ifndef VEGETABLE_H
#define VEGETABLE_H
#include "Plant.h"

class Vegetable: public Plant {
public:
  //Title: Vegetable
  //Pre: None
  //Post: Default constructor
  Vegetable();

  //Title: Vegetable(string)
  //Pre: None
  //Post: Constructor looking for vegetable color
  Vegetable(string color);

  //Title: die
  //Pre: None
  //Post: Vegetable isAlive = false
  virtual void die();

  //Title: virtual harvest
  //Pre: None
  //Post: Harvest the vegetables and calls die
  void harvest();

  //Title: virtual tick
  //Pre: None
  //Post: A month passes in the vegetable's life
  //Vegetables are harvested when they have a size of 5
  //Vegetables grow every tick that they aren't diseased
  //Vegetables have a 20% chance of being diseased each month
  //Vegetables are "un" diseased at the beginning of each month
  virtual void tick();

  //Title: operator << (Overloaded << operator)
  //Pre: None
  //Post: Inserts into the stream the vegetable's information
  virtual ostream& operator<<(ostream&);

private:
    string m_color;
};

#endif 

==> driver.h <==
#ifndef DRIVER_H
#define DRIVER_H
#include "Garden.h"

//Title: menu
//Pre: None
//Post: Displays the first menu (1. Plant Single Item to 4. Exit)
void menu();

//Title: manageMenu(Garden)
//Pre: Garden
//Post: Manages user input and calls corresponding function
void manageMenu(Garden& garden);

//Title: singleGarden(Garden)
//Pre: Garden - 1 for single plant, >1 for multiple plants
//Asks user what type of plant and quantity of plants
//Post: Calls addPlant and then simulateTime
void singleGarden(Garden& garden, int quantity = 1);

//Title: manyGarden(Garden)
//Pre: Garden
//Asks user how many of each plant to plant (Flower, Vegetable, Tree)
//Post: Calls addPlant and then simulateTime
void manyGarden(Garden& garden);

//Title: plantMenu
//Pre: None
//Post: Displays the menu of different types of plants (Flower, Vegetable, Tree)
void plantMenu();

//Title: simulateTime(Garden)
//Pre: Garden with plants and asks user how many months to simulate
//Post: Calls the garden.tick and passes it the number of months
void simulateTime(Garden& garden);

#endif
